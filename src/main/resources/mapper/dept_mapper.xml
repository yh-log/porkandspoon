<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="kr.co.porkandspoon.dao.DeptDAO">

	<!-- 조직도 노드 불러오기 -->
	<select id="setChart" resultType="kr.co.porkandspoon.dto.DeptDTO">
		SELECT 
        d.id, 
        d.text, 
        CASE WHEN d.parent IS NULL THEN '#' ELSE d.parent END AS parent,
        'default' AS type,
        NULL AS menuOrder,
        NULL AS position
	    FROM department d
	    UNION ALL
	    SELECT 
        u.username AS id,
        u.name AS text,   
        u.parent AS parent, 
        'file' AS type,
        u.position AS menuOrder,
        NULL AS position
	    FROM user u
	    WHERE u.parent IS NOT NULL
	</select>

	<!-- 노드에서 클릭된 사원 정보 가져오기(부서명도 같이) -->
	<select id="getUserlist" resultType="kr.co.porkandspoon.dto.UserDTO">
		SELECT 
        u.*,
        d.text AS text,
        f.new_filename AS new_filename -- 프로필 이미지 파일명 추가
    	FROM 
        user u
    	LEFT JOIN 
        department d
        ON u.parent = d.id
    	LEFT JOIN 
        file f
        ON f.code_name = 'up100' -- 프로필 이미지 코드
        AND f.pk_idx = u.username -- 사용자와 파일의 연결
    	WHERE 
        u.username = #{username}
	</select>
	
	<select id="getOrgchart" resultType="kr.co.porkandspoon.dto.DeptDTO">
		SELECT 
        d.id, 
        d.text, 
        d.parent,
        'default' AS type,
        NULL AS menuOrder,
        NULL AS position
    FROM department d
    UNION ALL
    SELECT 
        u.username AS id,
        u.name AS text,   
        CASE 
            WHEN u.position = 'po7' AND ds.parent IS NOT NULL AND ds.parent != 'NO1000' THEN ds.parent
            WHEN u.parent != 'NO1000' THEN u.parent
            ELSE NULL  
        END AS parent, 
        'file' AS type,
        u.position AS menuOrder,
        NULL AS position
    FROM user u
    LEFT JOIN direct_store ds 
        ON u.parent = ds.id
    WHERE u.parent IS NOT NULL
      AND (u.parent != 'NO1000' OR (u.position = 'po7' AND ds.parent != 'NO1000'))
	</select>
	
	<select id="getDeptdata" resultType="kr.co.porkandspoon.dto.DirectstoreDTO">
		SELECT 
        ds.id,
        ds.parent,
        ds.name,
        COALESCE(f.new_filename, 'noImg') AS new_filename,
        u.name AS username,
        u.birth,
        u.phone,
        u.join_date,
        u.title,
        u.position,
        d.text AS text
	    FROM 
	        direct_store ds
	    LEFT JOIN 
	        file f 
	        ON f.pk_idx = ds.parent AND f.code_name = 'bl001'
	    LEFT JOIN 
	        user u
	        ON u.username = ds.owner
	    LEFT JOIN 
	        department d
	        ON d.id = ds.parent
	    WHERE 
	        ds.parent = #{departmentId}
	    UNION
	    SELECT 
	        NULL AS id,
	        #{departmentId} AS parent,
	        NULL AS name,
	        COALESCE((SELECT new_filename FROM file WHERE pk_idx = #{departmentId} AND code_name = 'bl001'), 'noImg') AS new_filename,
	        NULL AS username,
	        NULL AS birth,
	        NULL AS phone,
	        NULL AS join_date,
	        NULL AS title,
	        NULL AS position,
	        d.text AS text
	    FROM 
	        department d
	    WHERE 
	        d.id = #{departmentId}
	        AND NOT EXISTS (
	            SELECT 1
	            FROM direct_store ds
	            WHERE ds.parent = #{departmentId}
	        );
	</select>
	
	<!-- author yh.kim (24.12.29)
		조직도 데이터 조회 -->
	<select id="getChartData" resultType="kr.co.porkandspoon.dto.DeptDTO" >
		WITH RECURSIVE menu_tree_cte AS (
			-- 1. 최상위 부서 (department 테이블의 루트 노드)
			SELECT
				id,
				COALESCE(parent, '#') AS parent,
				text,
				'default' AS type,
				1 AS menu_depth
			FROM department
			WHERE parent IS NULL
			  AND use_yn = 'Y' -- 조건 추가: department 테이블에서 use_yn = 'Y'

			UNION ALL

			-- 2. department 테이블의 하위 부서 연결
			SELECT
				d.id,
				COALESCE(d.parent, '#') AS parent,
				d.text,
				'default' AS type,
				cte.menu_depth + 1 AS menu_depth
			FROM department d
					 JOIN menu_tree_cte cte ON d.parent = cte.id
			WHERE d.use_yn = 'Y' -- 조건 추가: department 테이블에서 use_yn = 'Y'

			UNION ALL

			-- 3. direct_store 테이블 추가 (부서에 연결됨, name 컬럼 사용)
			SELECT
				ds.id,
				ds.parent AS parent,
				ds.name AS text, -- name 컬럼으로 수정
				'default' AS type,
				cte.menu_depth + 1 AS menu_depth
			FROM direct_store ds
					 JOIN menu_tree_cte cte ON ds.parent = cte.id
			WHERE ds.use_yn = 'Y' -- 조건 추가: direct_store 테이블에서 use_yn = 'Y'
		),
					   menu_and_employee AS (
						   -- 4. menu_tree_cte의 데이터를 기본적으로 포함
						   SELECT
							   id AS id,
							   parent,
							   text AS text,
							   menu_depth,
							   type,
							   NULL AS position_order
						   FROM menu_tree_cte

						   UNION ALL

						   -- 5. user 테이블 연결 (부서 및 direct_store의 id를 parent로 가짐)
						   SELECT
							   u.username AS id,
							   COALESCE(u.parent, '#') AS parent,
							   CONCAT(u.name, ' ', COALESCE(c.content, '')) AS text,
							   COALESCE(cte.menu_depth, 1) + 1 AS menu_depth,
							   'file' AS type,
							   CAST(SUBSTRING(u.position, 3) AS UNSIGNED) AS position_order
						   FROM user u
									LEFT JOIN code c ON u.position = c.name
									LEFT JOIN menu_tree_cte cte ON u.parent = cte.id
					   )
		SELECT
			id,
			parent,
			text,
			menuDepth,
			type,
			menuOrder
		FROM (
				 SELECT
					 id,
					 COALESCE(parent, '#') AS parent,
					 text,
					 menu_depth AS menuDepth,
					 COALESCE(type, 'file') AS type,
					 ROW_NUMBER() OVER (
                 PARTITION BY parent, menu_depth
                 ORDER BY COALESCE(position_order, id) ASC
             ) AS menuOrder
				 FROM menu_and_employee
			 ) final_result
		WHERE parent IS NOT NULL
		ORDER BY menuDepth, menuOrder;

	</select>

	<!-- author yh.kim, (24.12.26)
        부서 상세 페이지 이동 -->
	<select id="deptDetail"
			resultType="kr.co.porkandspoon.dto.DeptDTO" parameterType="String">
		SELECT d.id, d.text, d.content, d.use_yn, d.use_date, f.new_filename AS logo, GROUP_CONCAT(u.name) AS user_name, GROUP_CONCAT(u.username) AS username
		FROM department d
				 LEFT JOIN file f ON d.id = f.pk_idx AND f.code_name = 'bl001'
				 LEFT JOIN `user` u ON d.id = u.parent
		WHERE d.id = #{id}
	</select>

	<!-- author yn.kim (24.12.27)
		직영점 등록 요청 페이지 이동 및 조회 -->
	<select id="storeWriteView" parameterType="String"
			resultType="kr.co.porkandspoon.dto.ApprovalDTO">
		SELECT d.subject, d.name, d.content, d.from_date,
			   dept.use_date AS parent_date, d.address, dept.id AS dept_id,
			   d.address_detail, f.new_filename AS file_name, u.name AS user_name,
			   dept.text AS dept_text, al.approval_date
		FROM
			draft d LEFT JOIN user u ON d.username = u.username
					LEFT JOIN department
				dept ON d.dept_id = dept.id
					LEFT JOIN
			(SELECT
				 draft_idx, MAX(`order_num`) AS max_order
			 FROM approval_line
			 GROUP BY draft_idx)
				al_max ON d.draft_idx = al_max.draft_idx
					LEFT JOIN approval_line al ON
				d.draft_idx = al.draft_idx
					AND al.`order_num` = al_max.max_order
					AND al.status = 'ap004'
					LEFT JOIN file f ON f.pk_idx = dept.id AND
										f.code_name = 'bl001'
		WHERE
			d.draft_idx = #{idx}
		  AND d.target_type = 'df002'
		  AND d.action_type = 'df011'
	</select>

	<!-- author yh.kim (24.12.25)
		브랜드 등록 페이지 정보(기안문 테이블) -->
	<select id="deptWriteView" parameterType="String"
			resultType="kr.co.porkandspoon.dto.ApprovalDTO">
		SELECT d.subject, d.name, d.content, d.from_date,
			   f.new_filename AS logo_file, u.name AS user_name, dept.text AS
								 dept_text, al.approval_date
		FROM
			draft d LEFT JOIN user u ON d.username = u.username
					LEFT JOIN department dept ON d.dept_id = dept.id
					LEFT JOIN
			(SELECT
				 draft_idx, MAX(`order_num`) AS max_order
			 FROM approval_line
			 GROUP BY draft_idx)
				al_max ON d.draft_idx = al_max.draft_idx
					LEFT JOIN approval_line al ON d.draft_idx = al.draft_idx
				AND al.`order_num` = al_max.max_order
				AND al.status = 'ap004'
					LEFT JOIN file f ON d.draft_idx = f.pk_idx AND f.code_name = 'bl001'
		WHERE
			d.draft_idx = #{idx}
		  AND d.target_type = 'df001'
		  AND d.action_type = 'df011';
	</select>

	<!-- author yh.kim (24.12.27)
		직영점 상세 조회 -->
	<select id="storeDetail" parameterType="String"
			resultType="kr.co.porkandspoon.dto.DeptDTO">
		SELECT ds.id, ds.parent, d.use_date AS parent_date, ds.name, ds.use_yn, ds.address, ds.content,
			ds.is_close, ds.owner, ds.address_detail, ds.use_date, d.`text`, u.name AS user_name,
			f.new_filename AS logo, r.start_date, r.end_date
		FROM direct_store ds
				LEFT JOIN department d ON ds.parent = d.id
				LEFT JOIN `user` u ON ds.owner = u.username
				LEFT JOIN file f ON d.id = f.pk_idx AND f.code_name = 'bl001'
				LEFT JOIN rest r ON ds.id = r.id AND ds.is_close = 'Y'
		WHERE ds.id = #{id}
	</select>

	<!-- author yh.kim (24.12.25)
		부서 코드 중복 검사 -->
	<select id="deptCodeOverlay"
			parameterType="kr.co.porkandspoon.dto.DeptDTO" resultType="int">
		SELECT COUNT(id) FROM department WHERE id = #{id}
	</select>

	<!-- author yh.kim (25. 01. 07)
		부서 등록 조직도 선택 시 직원 정보 조회 -->
	<select id="getUserStoreInfo" parameterType="String" resultType="kr.co.porkandspoon.dto.UserDTO">
		SELECT
			CASE
				WHEN d.id IS NOT NULL AND ds.id IS NULL THEN d.`text`
				WHEN ds.id IS NOT NULL THEN
					CONCAT(
							(SELECT `text` FROM department WHERE id = ds.parent),
							' ',
							ds.name)
				ELSE '정보 없음'
				END AS dept_name,
			CASE
				WHEN d.id IS NOT NULL AND ds.id IS NULL THEN 'D'
				WHEN ds.id IS NOT NULL THEN 'S'
				ELSE NULL
				END AS type,
			CASE
				WHEN d.id IS NOT NULL THEN d.id
				WHEN ds.id IS NOT NULL THEN ds.id
				ELSE NULL
				END AS parent,
			c.content AS position,
    u.username,
    u.name AS name
		FROM user u
			LEFT JOIN direct_store ds ON u.parent = ds.id
			LEFT JOIN department d ON u.parent = d.id
			LEFT JOIN code c ON u.`position` = c.name
		WHERE u.username = #{username}

	</select>

	<!-- author yh.kim, (25.01.06)
        채팅 페이지 이동 시 직원 정보 조회 -->
	<select id="getUserDeptInfo" parameterType="String" resultType="kr.co.porkandspoon.dto.UserDTO">
		SELECT
			CASE
				WHEN d.id IS NOT NULL AND ds.id IS NULL THEN d.`text`
				WHEN ds.id IS NOT NULL THEN
					CONCAT(
							(SELECT `text` FROM department WHERE id = ds.parent),
							' ',
							ds.name)
				ELSE '정보 없음'
				END AS dept_name,
			CASE
				WHEN d.id IS NOT NULL AND ds.id IS NULL THEN 'D'
				WHEN ds.id IS NOT NULL THEN 'S'
				ELSE NULL
				END AS type,
			CASE
				WHEN d.id IS NOT NULL THEN d.id
				WHEN ds.id IS NOT NULL THEN ds.id
				ELSE NULL
				END AS parent,
			c.content AS position,
		u.username,
		u.name AS name
			FROM user u
				LEFT JOIN direct_store ds ON u.parent = ds.id
				LEFT JOIN department d ON u.parent = d.id
				LEFT JOIN code c ON u.`position` = c.name
			WHERE u.username = #{username}
	</select>

	<!-- author yh.kim, (25.01.07)
        브랜드 수정 시 조직도 초기 데이터 조회 -->
	<select id="deptUserDetail" parameterType="kr.co.porkandspoon.dto.UserDTO" resultType="kr.co.porkandspoon.dto.UserDTO">
		SELECT
			CASE
				WHEN d.id IS NOT NULL AND ds.id IS NULL THEN d.`text`
				WHEN ds.id IS NOT NULL THEN
					CONCAT(
							(SELECT `text` FROM department WHERE id = ds.parent),
							' ',
							ds.name)
				ELSE '정보 없음'
				END AS dept_name,
			CASE
				WHEN d.id IS NOT NULL AND ds.id IS NULL THEN 'D'
				WHEN ds.id IS NOT NULL THEN 'S'
				ELSE NULL
				END AS type,
			CASE
				WHEN d.id IS NOT NULL THEN d.id
				WHEN ds.id IS NOT NULL THEN ds.id
				ELSE NULL
				END AS parent,
			c.content AS position,
		u.username,
		u.name AS name
			FROM user u
				LEFT JOIN direct_store ds ON u.parent = ds.id
				LEFT JOIN department d ON u.parent = d.id
				LEFT JOIN code c ON u.`position` = c.name
			WHERE u.parent = #{id}
	</select>

</mapper>