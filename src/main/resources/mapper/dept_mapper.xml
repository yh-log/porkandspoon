<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="kr.co.porkandspoon.dao.DeptDAO">

	<!-- 조직도 노드 불러오기 -->
	<select id="setChart" resultType="kr.co.porkandspoon.dto.DeptDTO">
		SELECT 
        d.id, 
        d.text, 
        CASE WHEN d.parent IS NULL THEN '#' ELSE d.parent END AS parent,
        'default' AS type,
        NULL AS menuOrder,
        NULL AS position
	    FROM department d
	    UNION ALL
	    SELECT 
        u.username AS id,
        u.name AS text,   
        u.parent AS parent, 
        'file' AS type,
        u.position AS menuOrder,
        NULL AS position
	    FROM user u
	    WHERE u.parent IS NOT NULL
	</select>

	<!-- 노드에서 클릭된 사원 정보 가져오기(부서명도 같이) -->
	<select id="getUserlist" resultType="kr.co.porkandspoon.dto.UserDTO">
		SELECT 
        u.*,
        d.text AS text,
        f.new_filename AS new_filename -- 프로필 이미지 파일명 추가
    	FROM 
        user u
    	LEFT JOIN 
        department d
        ON u.parent = d.id
    	LEFT JOIN 
        file f
        ON f.code_name = 'up100' -- 프로필 이미지 코드
        AND f.pk_idx = u.username -- 사용자와 파일의 연결
    	WHERE 
        u.username = #{username}
	</select>
	
	<select id="getOrgchart" resultType="kr.co.porkandspoon.dto.DeptDTO">
		SELECT 
        d.id, 
        d.text, 
        d.parent,
        'default' AS type,
        NULL AS menuOrder,
        NULL AS position
	    FROM department d
	    UNION ALL
	    SELECT 
        u.username AS id,
        u.name AS text,   
        u.parent AS parent, 
        'file' AS type,
        u.position AS menuOrder,
        NULL AS position
	    FROM user u
	    WHERE u.parent IS NOT NULL
	</select>
	
	<select id="getDeptdata" resultType="kr.co.porkandspoon.dto.DirectstoreDTO">
		SELECT 
        ds.id,
        ds.parent,
        ds.name,
        COALESCE(f.new_filename, 'noImg') AS new_filename,
        u.name AS username,
        u.birth,
        u.phone,
        u.join_date,
        u.title,
        u.position,
        d.text AS text
	    FROM 
	        direct_store ds
	    LEFT JOIN 
	        file f 
	        ON f.pk_idx = ds.parent AND f.code_name = 'bl001'
	    LEFT JOIN 
	        user u
	        ON u.username = ds.owner
	    LEFT JOIN 
	        department d
	        ON d.id = ds.parent
	    WHERE 
	        ds.parent = #{departmentId}
	    UNION
	    SELECT 
	        NULL AS id,
	        #{departmentId} AS parent,
	        NULL AS name,
	        COALESCE((SELECT new_filename FROM file WHERE pk_idx = #{departmentId} AND code_name = 'bl001'), 'noImg') AS new_filename,
	        NULL AS username,
	        NULL AS birth,
	        NULL AS phone,
	        NULL AS join_date,
	        NULL AS title,
	        NULL AS position,
	        d.text AS text
	    FROM 
	        department d
	    WHERE 
	        d.id = #{departmentId}
	        AND NOT EXISTS (
	            SELECT 1
	            FROM direct_store ds
	            WHERE ds.parent = #{departmentId}
	        );
	</select>
	
	<!-- author yh.kim (24.12.29) 조직도 데이터 조회 -->
	<select id="getChartData" resultType="kr.co.porkandspoon.dto.DeptDTO" >
		WITH RECURSIVE menu_tree_cte AS (
			-- 1. 최상위 부서 (department 테이블의 루트 노드)
			SELECT
				id,
				COALESCE(parent, '#') AS parent,
				text,
				'default' AS type,
				1 AS menu_depth
			FROM department
			WHERE parent IS NULL

			UNION ALL

			-- 2. department 테이블의 하위 부서 연결
			SELECT
				d.id,
				COALESCE(d.parent, '#') AS parent,
				d.text,
				'default' AS type,
				cte.menu_depth + 1 AS menu_depth
			FROM department d
					 JOIN menu_tree_cte cte ON d.parent = cte.id

			UNION ALL

			-- 3. direct_store 테이블 추가 (부서에 연결됨, name 컬럼 사용)
			SELECT
				ds.id,
				ds.parent AS parent,
				ds.name AS text, -- name 컬럼으로 수정
				'default' AS type,
				cte.menu_depth + 1 AS menu_depth
			FROM direct_store ds
					 JOIN menu_tree_cte cte ON ds.parent = cte.id
		),
					   menu_and_employee AS (
						   -- 4. menu_tree_cte의 데이터를 기본적으로 포함
						   SELECT
							   id AS id,
							   parent,
							   text AS text,
							   menu_depth,
							   type,
							   NULL AS position_order
						   FROM menu_tree_cte

						   UNION ALL

						   -- 5. user 테이블 연결 (부서 및 direct_store의 id를 parent로 가짐)
						   SELECT
							   u.username AS id,
							   COALESCE(u.parent, '#') AS parent,
							   CONCAT(u.name, ' ', COALESCE(c.content, '')) AS text,
							   COALESCE(cte.menu_depth, 1) + 1 AS menu_depth,
							   'file' AS type,
							   CAST(SUBSTRING(u.position, 3) AS UNSIGNED) AS position_order
						   FROM user u
									LEFT JOIN code c ON u.position = c.name
									LEFT JOIN menu_tree_cte cte ON u.parent = cte.id
					   )
		SELECT
			id,
			parent,
			text,
			menuDepth,
			type,
			menuOrder
		FROM (
				 SELECT
					 id,
					 COALESCE(parent, '#') AS parent,
					 text,
					 menu_depth AS menuDepth,
					 COALESCE(type, 'file') AS type,
					 ROW_NUMBER() OVER (
            PARTITION BY parent, menu_depth
            ORDER BY COALESCE(position_order, id) ASC
        ) AS menuOrder
				 FROM menu_and_employee
			 ) final_result
		WHERE parent IS NOT NULL
		ORDER BY menuDepth, menuOrder
-- 		WITH RECURSIVE menu_tree_cte AS (
-- 			SELECT
-- 				id,
-- 				COALESCE(parent, '#') AS parent,
-- 				text,
-- 				'default' AS type,
-- 				1 AS menu_depth
-- 			FROM department
-- 			WHERE parent IS NULL
--
-- 			UNION ALL
--
-- 			SELECT
-- 				d.id,
-- 				COALESCE(d.parent, '#') AS parent,
-- 				d.text,
-- 				'default' AS type,
-- 				cte.menu_depth + 1 AS menu_depth
-- 			FROM department d
-- 					 JOIN menu_tree_cte cte ON d.parent = cte.id
-- 		),
-- 					   menu_and_employee AS (
-- 						   SELECT
-- 							   id AS id,
-- 							   parent,
-- 							   text AS text,
-- 							   menu_depth,
-- 							   type,
-- 							   NULL AS position_order
-- 						   FROM menu_tree_cte
--
-- 						   UNION ALL
--
-- 						   SELECT
-- 							   u.username AS id,
-- 							   COALESCE(u.parent, '#') AS parent,
-- 							   CONCAT(u.name, ' ', COALESCE(c.content, '')) AS text,
-- 							   COALESCE(cte.menu_depth, 1) + 1 AS menu_depth,
-- 							   'file' AS type,
-- 							   CAST(SUBSTRING(u.position, 3) AS UNSIGNED) AS position_order
-- 						   FROM user u
-- 									LEFT JOIN code c ON u.position = c.name
-- 									LEFT JOIN menu_tree_cte cte ON u.parent = cte.id
-- 					   )
-- 		SELECT
-- 			id,
-- 			parent,
-- 			text,
-- 			menuDepth,
-- 			type,
-- 			menuOrder
-- 		FROM (
-- 				 SELECT
-- 					 id,
-- 					 COALESCE(parent, '#') AS parent,
-- 					 text,
-- 					 menu_depth AS menuDepth,
-- 					 COALESCE(type, 'file') AS type,
-- 					 ROW_NUMBER() OVER (
--             PARTITION BY parent, menu_depth
--             ORDER BY COALESCE(position_order, id) ASC
--         ) AS menuOrder
-- 				 FROM menu_and_employee
-- 			 ) final_result
-- 		WHERE parent IS NOT NULL
-- 		ORDER BY menuDepth, menuOrder
-- 		WITH RECURSIVE menu_tree_cte AS (
-- 			SELECT
-- 				id,
-- 				COALESCE(parent, '#') AS parent,
-- 				text,
-- 				'default' AS type,
-- 				1 AS menu_depth
-- 			FROM department
-- 			WHERE parent IS NULL
--
-- 			UNION ALL
--
-- 			SELECT
-- 				d.id,
-- 				COALESCE(d.parent, '#') AS parent,
-- 				d.text,
-- 				'default' AS type,
-- 				cte.menu_depth + 1 AS menu_depth
-- 			FROM department d
-- 					 JOIN menu_tree_cte cte ON d.parent = cte.id
-- 		),
-- 					   menu_and_employee AS (
-- 						   SELECT
-- 							   id AS id,
-- 							   parent,
-- 							   text AS text,
-- 							   menu_depth,
-- 							   type,
-- 							   NULL AS position_order
-- 						   FROM menu_tree_cte
--
-- 						   UNION ALL
--
-- 						   SELECT
-- 							   u.username AS id,
-- 							   COALESCE(u.parent, '#') AS parent,
-- 							   CONCAT(u.name, ' ', COALESCE(c.content, '')) AS text,
-- 							   COALESCE(cte.menu_depth, 1) + 1 AS menu_depth,
-- 							   'file' AS type,
-- 							   CAST(SUBSTRING(u.position, 3) AS UNSIGNED) AS position_order
-- 						   FROM user u
-- 									LEFT JOIN code c ON u.position = c.name
-- 									LEFT JOIN menu_tree_cte cte ON u.parent = cte.id
-- 					   )
-- 		SELECT
-- 			id,
-- 			parent,
-- 			text,
-- 			menuDepth,
-- 			type,
-- 			menuOrder
-- 		FROM (
-- 				 SELECT
-- 					 id,
-- 					 COALESCE(parent, '#') AS parent,
-- 					 text,
-- 					 menu_depth AS menuDepth,
-- 					 COALESCE(type, 'file') AS type,
-- 					 ROW_NUMBER() OVER (
--             PARTITION BY parent, menu_depth
--             ORDER BY COALESCE(position_order, id) ASC
--         ) AS menuOrder
-- 				 FROM menu_and_employee
-- 			 ) final_result
-- 		ORDER BY menuDepth, menuOrder
	</select>
	
</mapper>