<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="kr.co.porkandspoon.dao.ResevationDAO">
	<!-- DeptDTO에 대한 ResultMap-->
    <resultMap id="DeptMap" type="kr.co.porkandspoon.dto.DeptDTO">
        <result property="text" column="text"/>
        <result property="parent" column="parent"/>
    </resultMap>

    <!-- UserDTO에 대한 ResultMap -->
    <resultMap id="UserMap" type="kr.co.porkandspoon.dto.UserDTO">
        <result property="username" column="username"/>
        <result property="name" column="name"/>
        <result property="position_content" column="position_content"/>
        <!-- dept는 DeptMap을 참조 -->
        <association property="dept" resultMap="DeptMap"/>
    </resultMap>

    <!-- 사용자 정보를 가져오는 select 문 -->
    <select id="info" resultMap="UserMap">
        SELECT 
            u.username, u.name, c.content AS position_content	, u.parent, d.text
        FROM 
            user u
        LEFT JOIN 
            department d
	    ON  
	        u.parent = d.id
		LEFT JOIN
			code c
		ON
			u.position = c.name
        WHERE 
            u.username = #{userId}
    </select>
	
	
	<!-- 등록 페이지(등록자 정보) 
	<select id="info" resultType="kr.co.porkandspoon.dto.UserDTO">
		SELECT * FROM user WHERE username = #{loginId}
	</select> -->
	
	<!-- 물품 등록 -->
	<insert id="articleWrite" parameterType="map">
		INSERT INTO item(username,type,item_name,model_name,content,is_item,selection)
						VALUES(#{username},#{type},#{item_name},#{model_name},#{content},#{is_item},#{selection})
	</insert>
	
	<!-- 자원리스트 조회 -->
	 <select id="list" resultType="kr.co.porkandspoon.dto.CalenderDTO">
        <choose>
            <when test="category == 'room'">
                SELECT 
                    r.no,
                    r.username,
                    u.name,
                    'room' AS category,
                    r.room_name AS subject,
                    NULL AS type,
                    NULL AS model_name,
                    r.count,
                    r.content,
                    r.create_date,
                    r.updater,
                    r.update_date,
                    r.is_room AS is_active,
                    r.use_yn 
                FROM 
                    room r
                JOIN 
                    user u ON r.username = u.username
                WHERE 
                    r.use_yn = 'Y' 
                ORDER BY 
                    r.create_date DESC 
                LIMIT #{offset}, #{size}
            </when>
            <when test="category == 'article'">
                SELECT 
                    i.no,
                    i.username,
                    u.name,
                    'item' AS category,
                    i.item_name AS subject,
                    i.type,
                    i.model_name,
                    NULL AS count,
                    i.content,
                    i.create_date,
                    i.updater,
                    i.update_date,
                    i.is_item AS is_active,
                    i.use_yn
                FROM 
                    item i
                JOIN 
                    user u ON i.username = u.username
                WHERE 
                    i.use_yn = 'Y'
                ORDER BY 
                    i.create_date DESC 
                LIMIT #{offset}, #{size}
            </when>
            <otherwise>
                SELECT 
                    r.no,
                    r.username,
                    u.name,
                    'room' AS category,
                    r.room_name AS subject,
                    NULL AS type,
                    NULL AS model_name,
                    r.count,
                    r.content,
                    r.create_date,
                    r.updater,
                    r.update_date,
                    r.is_room AS is_active,
                    r.use_yn 
                FROM 
                    room r
                JOIN 
                    user u ON r.username = u.username
                WHERE 
                    r.use_yn = 'Y' 
                UNION ALL   
                SELECT 
                    i.no,
                    i.username,
                    u.name,
                    'item' AS category,
                    i.item_name AS subject,
                    i.type,
                    i.model_name,
                    NULL AS count,
                    i.content,
                    i.create_date,
                    i.updater,
                    i.update_date,
                    i.is_item AS is_active,
                    i.use_yn
                FROM 
                    item i
                JOIN 
                    user u ON i.username = u.username
                WHERE 
                    i.use_yn = 'Y'
                ORDER BY 
                    create_date DESC 
                LIMIT #{offset}, #{size}
            </otherwise>
        </choose>
    </select>
	
	<!-- 물품 상세보기 -->
	<select id="articleDetail" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT 
			i.no,
		    i.username,
		    u.name,
		    i.item_name,
		    i.type,
		    i.model_name,
		    i.content,
		    i.create_date,
		    i.updater,
		    i.update_date,
		    i.is_item,
			i.use_yn,
			i.selection
		FROM
			item i
		JOIN
			`user` u ON i.username = u.username
		WHERE no=#{no}
	</select>
	
	<!-- 자원 예약 가능 상태 활성 비활성 -->
	<update id="updateYN">
		UPDATE 
		<if test="filter == 'articleY'">
			item SET is_item = 'Y' WHERE no = #{no}
		</if>
		<if test="filter == 'articleN'">
			item SET is_item = 'N' WHERE no = #{no}
		</if>
		<if test="filter == 'roomY'">
			room SET is_room = 'Y' WHERE no = #{no}
		</if>
		<if test="filter == 'roomN'">
			room SET is_room = 'N' WHERE no = #{no}
		</if>
	</update>
	
	<!-- 물품 수정 -->
	<update id="articleUpdate" parameterType="map">
		UPDATE item SET
			updater = #{username},
			type = #{type},
			item_name = #{item_name},
			model_name = #{model_name},
			content = #{content},
			is_item = #{is_item},
			selection = #{selection}
		WHERE no = #{no}	
	</update>
	
	<!-- 회의실 등록 -->
	<insert id="roomWrite" parameterType="map">
		INSERT INTO room(username,room_name,count,content,is_room)
						VALUES(#{username},#{room_name},#{count},#{content},#{is_room})
	</insert>
	
	<!-- 회의실 상세보기 -->
	<select id="roomDetail" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT 
			r.no,
		    r.username,
		    u.name,
		    r.room_name,
		    r.count,
		    r.content,
		    r.create_date,
		    r.updater,
		    r.update_date,
		    r.is_room,
			r.use_yn
		FROM
			room r
		JOIN
			`user` u ON r.username = u.username
		WHERE no=#{no}
	</select>
	
	<!-- 회의실 수정 -->
	<update id="roomUpdate" parameterType="map">
		UPDATE room SET
			updater = #{username},
			room_name = #{room_name},
			count = #{count},
			content = #{content},
			is_room = #{is_room}
		WHERE no = #{no}	
	</update>
	
	<!-- 자원 소프트 삭제 활성 비활성 -->
	<update id="allDelete">
		UPDATE 
		<if test="filter == 'article'">
			item SET use_yn = 'N' WHERE no = #{no}
		</if>
		<if test="filter == 'room'">
			room SET use_yn = 'N' WHERE no = #{no}
		</if>
	</update>
	
	<select id="note" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT * FROM item WHERE selection = 'note' AND use_yn = 'Y' AND is_item = 'Y'
	</select>
	
	<select id="project" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT * FROM item WHERE selection = 'project' AND use_yn = 'Y' AND is_item = 'Y'
	</select>
	
	<select id="car" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT * FROM item WHERE selection = 'car' AND use_yn = 'Y' AND is_item = 'Y'
	</select>
	
	<select id="itemDetail" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT * FROM item WHERE no = #{no} AND use_yn = 'Y' AND is_item = 'Y'
	</select>
	
	<!-- 물품 예약 리스트 조회 -->
	<select id="articleList" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT
			idx,
	        subject,
	        start_date,
	        end_date,
	        'A' AS `type` 
	        FROM item_schedule
	</select>
	
	<select id="selection" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT * FROM item WHERE selection = #{selection} AND is_item = 'Y' AND use_yn = 'Y'
	</select>
	
	<!-- 물품 예약 등록 -->
	<insert id="itemWrite" parameterType="kr.co.porkandspoon.dto.CalenderDTO">
		INSERT INTO item_schedule(no, username, start_date, end_date, subject, content)
        							VALUES(#{no},#{username},#{start_date},#{end_date},#{subject},#{content})
	</insert>
	
	<!-- 물품 중복 방지 -->
	<select id="isDuplicate" resultType="int">
	    SELECT COUNT(*) 
	    FROM item_schedule 
	    WHERE no = #{no} AND ((start_date &lt;= #{start_date} AND end_date &gt;= #{end_date}))
	</select>	
	
	<!-- 예약 일정 상세보기 -->
    <select id="resDetail" parameterType="int" resultType="kr.co.porkandspoon.dto.CalenderDTO">
        SELECT 
			s.idx,
			s.no,
			s.username,
			s.start_date,
			s.end_date,
			s.subject,
			s.content,
			s.create_date,
			i.item_name,
			i.selection,
			u.name 
		FROM item_schedule s JOIN item i ON s.no = i.no
		JOIN user u ON s.username = u.username 
		WHERE idx=#{idx}
    </select>
    
    <!-- 물품캘린더 일정 수정 -->
    <update id="itemUpdate" parameterType="map">
	    UPDATE item_schedule SET 
	        start_date = #{calenderDto.start_date},
	        end_date = #{calenderDto.end_date},
	        subject = #{calenderDto.subject},
	        content = #{calenderDto.content},
	        updater = #{calenderDto.username},
	        no = #{calenderDto.no}
	    WHERE idx = #{idx}
	</update>
	
	<!-- 물품 예약 일정 삭제 -->
	<delete id="itemDelete">
		DELETE FROM item_schedule WHERE idx = #{idx}
	</delete>
	
	<select id="room" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT * FROM room
	</select>
	
	<select id="resRoomDetail" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT * FROM room WHERE no = #{no}
	</select>
	
	<!-- 회의실 예약 리스트 조회 -->
	<select id="roomList" resultType="kr.co.porkandspoon.dto.CalenderDTO">
		SELECT 
			idx,
	        subject,
	        start_date,
	        end_date,
	        'R' AS `type`
		FROM room_schedule
	</select>
	
	<!-- 회의실 중복방지 -->
	<select id="roomDuplicate" resultType="int">
	    SELECT COUNT(*) 
	    FROM room_schedule 
	    WHERE no = #{no} AND ((start_date &lt;= #{start_date} AND end_date &gt;= #{end_date}))
	</select>
		
	<!-- 회의실 예약자 등록 -->
	<insert id="roomReservationWrite" 
				useGeneratedKeys="true"
				keyProperty="idx"
				keyColumn="idx"
				parameterType="kr.co.porkandspoon.dto.CalenderDTO">
        INSERT INTO room_schedule(no, username, start_date, end_date, subject, content)
        							 VALUES(#{no}, #{username}, #{start_date}, #{end_date}, #{subject}, #{content})
    </insert>
    
    <!-- 참석자 삽입 -->
    <insert id="insertAttendee" parameterType="map">
        INSERT attendees(idx, username)
        		      VALUES(#{idx}, #{username})
    </insert>
    
    <!-- 회의실 예약 일정 상세보기 -->
    <select id="roomReservationDetail" parameterType="int" resultType="kr.co.porkandspoon.dto.CalenderDTO">
        SELECT 
			s.idx,
			s.no,
			s.username,
			s.start_date,
			s.end_date,
			s.subject,
			s.content,
			s.create_date,
			i.room_name,
			i.count,
			u.name
		FROM room_schedule s 
		JOIN room i ON s.no = i.no
		JOIN user u ON s.username = u.username
		WHERE s.idx=#{idx}
    </select>
       
    <!-- 사용자 정보를 가져오는 select 문 -->
    <select id="attendeesList" resultMap="UserMap">
        SELECT 
            u.username, u.name, c.content AS position_content	, u.parent, d.text
        FROM 
            attendees a
        JOIN user u on a.username = u.username     
        JOIN department d ON u.parent = d.id
		JOIN code c ON u.position = c.name
        WHERE a.idx = #{idx}
    </select>
    	
	<!-- 모든 참석자 삭제 -->
	<delete id="deleteAllAttendees" parameterType="String">
	    DELETE FROM attendees WHERE idx = #{idx}
	</delete>
	
	<!-- 회의실 예약 수정 -->
	<update id="roomReservationUpdate" parameterType="kr.co.porkandspoon.dto.CalenderDTO">
		UPDATE room_schedule SET
	        no = #{no},
	        username = #{username},
	        start_date = #{start_date},
	        end_date = #{end_date},
	        subject = #{subject},
	        content = #{content},
	        updater = #{username}
    	WHERE idx = #{idx}
	</update>
	
	<!-- 회의 예약 삭제 -->
	<delete id="roomDelete">
	    DELETE FROM room_schedule WHERE idx = #{idx}
	</delete>
	
	<select id="total">
		SELECT
		(SELECT COUNT(*) FROM item_schedule WHERE username = #{loginId}) + (SELECT COUNT(*) FROM room_schedule WHERE username = #{loginId})
		AS total
	</select>
			
	
</mapper>