<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
        >

<mapper namespace="kr.co.porkandspoon.dao.ChatDAO">

    <!-- author yh.kim, (25.01.06)
        채팅 페이지 이동 시 직원 정보 조회 -->
    <select id="getUserStoreInfo" parameterType="String" resultType="kr.co.porkandspoon.dto.UserDTO">
        SELECT
            CASE
                WHEN d.id IS NOT NULL AND ds.id IS NULL THEN d.`text`
                WHEN ds.id IS NOT NULL THEN
                    CONCAT(
                            (SELECT `text` FROM department WHERE id = ds.parent),
                            ' ',
                            ds.name)
                ELSE '정보 없음'
                END AS dept_name,
            CASE
                WHEN d.id IS NOT NULL AND ds.id IS NULL THEN 'D'
                WHEN ds.id IS NOT NULL THEN 'S'
                ELSE NULL
                END AS type,
            CASE
                WHEN d.id IS NOT NULL THEN d.id
                WHEN ds.id IS NOT NULL THEN ds.id
                ELSE NULL
                END AS parent,
            c.content AS position,
        u.username,
        u.name AS name
            FROM user u
                LEFT JOIN direct_store ds ON u.parent = ds.id
                LEFT JOIN department d ON u.parent = d.id
                LEFT JOIN code c ON u.`position` = c.name
            WHERE u.username = #{username}

    </select>

    <!-- author yh.kim, (25.01.06)
        생성된 채팅방 정보 저장 -->
    <insert id="createRoom" parameterType="kr.co.porkandspoon.dto.ChatRoom">
        INSERT INTO chat_room(roomId, name) VALUES (#{roomId}, #{name})
    </insert>

    <!-- author yh.kim, (25.01.06)
        채팅방 생성한 직원 정보 저장 -->
    <insert id="createRoomUser" parameterType="kr.co.porkandspoon.dto.ChatRoom">
        INSERT INTO chat_room_user(roomId, username) VALUES (#{roomId}, #{createdBy})
    </insert>

    <!-- author yh.kim, (25.01.06)
        채팅방 직원 추가 -->
    <insert id="saveUsersToRoom" parameterType="kr.co.porkandspoon.dto.ChatDTO">
        INSERT INTO chat_room_user (roomId, username)
        VALUES
        <foreach collection="usernames" item="user" separator=",">
            (#{roomId}, #{user})
        </foreach>
    </insert>

    <!-- author yh.kim, (25.01.06)
        직원 채팅방 리스트 조회 -->
    <select id="userRoomList" parameterType="String" resultType="kr.co.porkandspoon.dto.ChatDTO">
        SELECT cru.roomId, cru.username, cru.join_date, COALESCE(cru.custom_name, cr.name) AS name, COALESCE(cm.content, '최근 채팅이 존재하지 않습니다') AS content, cm.send_date
        FROM chat_room_user cru LEFT JOIN chat_room cr ON cru.roomId = cr.roomId
                                LEFT JOIN (
            SELECT roomId, content, send_date
            FROM chat_message
            WHERE (roomId, send_date) IN
                  (SELECT roomId, MAX(send_date) AS latest_send_date
                   FROM chat_message
                   GROUP BY roomId)) cm ON cru.roomId = cm.roomId
        WHERE cru.username = #{username} AND cru.use_yn = 'Y'
        ORDER BY cru.join_date DESC
    </select>

    <!-- author yh.kim, (25.01.06)
        채팅 메시지 조회 -->
    <select id="chatRoomMessage" parameterType="String" resultType="kr.co.porkandspoon.dto.ChatDTO">
        SELECT cm.*
        FROM chat_message cm
                 JOIN chat_room_user cru
                      ON cm.roomId = cru.roomId
        WHERE cm.roomId = #{chatRoomId}
          AND cru.username = #{username}
          AND cm.send_date > cru.join_date
        ORDER BY cm.send_date DESC
            LIMIT 0, 10
    </select>

    <!-- author yh.kim, (25.01.06)
        채팅 메시지 읽음 처리 -->
    <update id="chatMessageReadUpdate" parameterType="String">
        UPDATE chat_message_read SET is_read = 'Y' WHERE roomId = #{chatRoomId} AND receiver = #{username}
    </update>

    <!-- author yh.kim, (25.01.06)
        채팅 메시지 저장 -->
    <insert id="saveChatMessage"
            useGeneratedKeys="true"
            keyColumn="idx"
            keyProperty="idx"
            parameterType="kr.co.porkandspoon.dto.ChatDTO">
        INSERT INTO chat_message (roomId, content, sender) VALUES (#{roomId}, #{content}, #{username})
    </insert>

    <!-- author yh.kim, (25.01.06)
        채팅 읽음 테이블 입력 -->
    <insert id="saveChatRead" parameterType="kr.co.porkandspoon.dto.ChatDTO">
        INSERT INTO chat_message_read (chat_message_idx, roomId, receiver)
        SELECT
            #{idx},
            cru.roomId,
            cru.username
        FROM
            chat_room_user cru
        WHERE
            cru.roomId = #{roomId} -- 해당 채팅방 ID
          AND cru.username != #{username} -- 현재 사용자를 제외
    </insert>

    <!-- author yh.kim, (25.01.06)
        채팅방 나가기 -->
    <update id="chatRoomDelete" parameterType="kr.co.porkandspoon.dto.ChatDTO">
        UPDATE chat_room_user SET use_yn = 'N' WHERE roomId = #{roomId} AND username = #{username}
    </update>

</mapper>