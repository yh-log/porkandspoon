<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="kr.co.porkandspoon.dao.ManageDAO">
 		
 <!-- 대표 정보 불러오기 -->
 <select id="getCEOInfo" resultType="String">
 	SELECT name FROM user where position = 'po0'
 </select>
 
 <!-- 직영점 이름 가져오기 -->
 <select id="getSpotName" resultType="kr.co.porkandspoon.dto.ManageDTO">
 	SELECT id,name AS spotName FROM direct_store WHERE owner = #{owner}
 </select>
 
 <!-- 브랜드 리스트 불러오기 -->
	<select id="getBrandList" resultType="kr.co.porkandspoon.dto.ManageDTO">
	    SELECT id,text,create_date FROM department WHERE id LIKE 'B%'
	    ORDER BY create_date ASC LIMIT 5
	</select>
	
	<select id="getFile" resultType="kr.co.porkandspoon.dto.FileDTO">
		SELECT * FROM file WHERE code_name = #{code_name} AND pk_idx = #{id}
	</select>
	
	<!-- 브랜드 정보 가져오기 -->
	<select id="getBrandInfo">
		SELECT 
		    COALESCE(u.name, '없음') AS name,
		    d.id, 
		    d.text AS department_name
		FROM department d
		LEFT JOIN user u ON u.parent = d.id AND u.title = 'T'
		WHERE d.id = (SELECT parent FROM user WHERE username = #{id})
		LIMIT 1;
	</select>
	
	<!-- 직영점 리스트 불러오기 -->
	<select id="getDirectList" resultType="kr.co.porkandspoon.dto.ManageDTO">
	   SELECT ds.name as spotName,ds.owner,ds.address,ds.create_date,u.name FROM direct_store ds
 		LEFT JOIN user u ON u.username = ds.owner 
 		WHERE ds.parent = (select parent from direct_store ds where parent = (select parent from user where username = #{id}) limit 1)
	    ORDER BY create_date ASC LIMIT 5;
	</select>
	
	<!-- 직영점 정보 가져오기 -->
 	<select id="getDirectInfo" resultType="kr.co.porkandspoon.dto.ManageDTO">
 		SELECT ds.address,ds.address_detail,ds.name as spotName,u.name, u.username, ds.id FROM direct_store ds
 		 LEFT JOIN user u ON ds.owner = u.username WHERE ds.owner = #{owner}
 	</select>	
 	
	<!-- 직원 리스트 불러오기 -->
	<select id="getPartList5" resultType="kr.co.porkandspoon.dto.ManageDTO">
		SELECT p.*, s.name as spotName FROM part p LEFT JOIN direct_store s ON p.id = s.id
	    WHERE p.is_quit = 'N' AND p.use_yn='Y' AND p.id  = (select id from direct_store where owner = #{owner})
	    ORDER BY p.join_date ASC LIMIT 5
	</select>
 
	 <insert 
	    useGeneratedKeys="true"
	    keyColumn="part_idx"
	    keyProperty="part_idx"
		id="setPartWrite" parameterType="Map">
		 	INSERT INTO part(name,birth,gender,is_quit,id,phone,pay,address,creater,join_date)
		 		VALUES(#{name},#{birth},#{gender},#{is_quit},#{id},#{phone},#{pay},#{address},#{creater},#{join_date})
	 </insert> 
 
	 <insert id="setPartHistory" parameterType="Map">
	    INSERT INTO part_history (part_idx, pay, work_date, start_time, end_time, is_done)
	    VALUES (#{part_idx}, #{pay}, #{work_date}, #{start_time}, #{end_time}, #{is_done})
	</insert>
	 
 	<update id="editPartHistory" parameterType="Map">
	 	UPDATE part_history
		    SET 
		        part_idx = #{part_idx}, 
		        pay = #{pay}, 
		        work_date = #{work_date}, 
		        start_time = #{start_time}, 
		        end_time = #{end_time}, 
		        is_done = #{is_done}
		    WHERE history_idx = #{history_idx}
 	</update>
 	
 	
 	<delete id="OneDelPartHistory" parameterType="Map">
 		DELETE FROM part_history WHERE history_idx = #{history_idx}
 	</delete>
 
 
  <insert id="setPartTime" parameterType="Map">
 	INSERT INTO part_time(part_idx,work_date,start_time,end_time)
 		VALUES(#{part_idx},#{work_date},#{start_time},#{end_time})
 </insert> 
   
   <select id="partDetail" resultType="kr.co.porkandspoon.dto.ManageDTO">
   		SELECT * FROM part WHERE part_idx = #{part_idx}
   </select>
   
   <delete id="delPart" parameterType="String">
   		UPDATE part
		    SET 
		        use_yn = #{use_yn}
		     WHERE part_idx = #{part_idx}
   </delete>
   
   <select id="scheduleDetail" resultType="kr.co.porkandspoon.dto.ManageDTO">
   		SELECT * FROM part_time WHERE part_idx = #{part_idx}
   </select>
   
   <update id="editPart" parameterType="Map">
	    UPDATE part
	    SET 
	        name = #{name},
	        birth = #{birth},
	        gender = #{gender},
	        is_quit = #{is_quit},
	        id = #{id},
	        phone = #{phone},
	        pay = #{pay},
	        address = #{address},
	        updater = #{updater},
	        join_date = #{join_date},
	        quit_date = CASE 
	                      WHEN #{is_quit} = 'Y' THEN NOW()
	                      ELSE quit_date
	                    END
	    WHERE part_idx = #{part_idx}
	</update>
	
	<delete id="deletePartTime" parameterType="String">
	    DELETE FROM part_time WHERE part_idx = #{part_idx}
	</delete>

 	<select id="count" resultType="int" parameterType="int">
    SELECT CEIL(count(part_idx) / #{cnt}) AS pages
    FROM part
    <where>
        <if test="is_quit == 'all' or is_quit == null">
            (is_quit = 'Y' OR is_quit = 'N')
        </if>
        <!-- is_quit가 "all"이 아닐 경우 특정 조건 -->
        <if test="is_quit != 'all' and is_quit != null">
            is_quit = #{is_quit}
        </if>
       	AND use_yn='Y'
        AND id = (select id from direct_store where owner = #{owner})
        <if test="keyword != null and !keyword.equals('') and opt.equals('name')">
            AND name LIKE CONCAT('%', #{keyword}, '%')
        </if>
    </where>
	</select>
   
<select id="getPartList" resultType="kr.co.porkandspoon.dto.ManageDTO">
    SELECT 
        p.*, 
        s.name AS spotName
    FROM 
        part p
    LEFT JOIN 
        direct_store s 
    ON 
        p.id = s.id
    <where>
        <!-- is_quit가 "all"일 경우 모든 데이터 -->
        <if test="is_quit == 'all' or is_quit == null">
            (is_quit = 'Y' OR is_quit = 'N')
        </if>
        <!-- is_quit가 "all"이 아닐 경우 특정 조건 -->
        <if test="is_quit != 'all' and is_quit != null">
            is_quit = #{is_quit}
        </if>
        AND p.use_yn='Y'
        AND p.id = (SELECT id FROM direct_store WHERE owner = #{owner})
        <if test="keyword != null and !keyword.equals('')">
            AND p.name LIKE CONCAT('%', #{keyword}, '%')
        </if>
    </where>
    ORDER BY 
        p.join_date DESC
    LIMIT #{limit} OFFSET #{offset}
</select>



 	
	   
	<select id="getPartTime" resultType="kr.co.porkandspoon.dto.ManageDTO">
	    SELECT ph.history_idx,ph.start_time,ph.end_time,ph.pay,ph.is_done,ph.work_date, p.name AS part_name, p.join_date,p.part_idx
	    FROM part_history ph
	    JOIN part p ON ph.part_idx = p.part_idx
	    WHERE p.id IN (
	        SELECT ds.id 
	        FROM direct_store ds 
	        WHERE ds.owner = #{owner} 
	    )
	</select>

	<select id="getPartNames" resultType="kr.co.porkandspoon.dto.ManageDTO">
		SELECT part_idx,name FROM part WHERE use_yn = 'Y' AND id = (select id from direct_store where owner = #{owner})
	</select>


	<delete id="deletePartHistory" parameterType="String">
	    <![CDATA[
	    DELETE FROM part_history
	    WHERE part_idx = #{part_Idx}
	      AND work_date >= #{today}
	    ]]>
	</delete>

	
	


    <!-- author yh.kim, (25.01.03)
        휴점 등록 페이지 이동 시 부서, 직영점명 조회 -->
    <select id="getUserStoreInfo" parameterType="String" resultType="kr.co.porkandspoon.dto.UserDTO">
        SELECT d.`text` AS parent , ds.name, c.content AS position, ds.id AS dept_name
        FROM user u LEFT JOIN direct_store ds ON u.username = ds.owner
                    LEFT JOIN  department d ON d.id = ds.parent
                    LEFT JOIN code c ON u.`position`= c.name WHERE u.username = #{username}
    </select>

    <!-- author yh.kim, (25.01.03)
        휴점 등록 -->
    <insert id="restWrite"
            useGeneratedKeys="true"
            keyProperty="rest_idx"
            keyColumn="rest_idx"
            parameterType="kr.co.porkandspoon.dto.RestDTO">

        INSERT INTO rest(id, content, start_date, end_date, creater, subject)
            VALUES (#{id}, #{content}, #{start_date}, #{end_date}, #{username}, #{subject})

    </insert>

    <!-- author yh.kim, (25.01.03)
    직영점 휴점 정보 업데이트 -->
    <update id="storeRestUpdate" parameterType="kr.co.porkandspoon.dto.RestDTO">
        UPDATE direct_store SET is_close = #{type} WHERE id = #{id}
    </update>

    <!-- author yh.kim, (25.01.03)
        휴점 content 이미지 등록 -->
    <insert id="restFileWrite" parameterType="kr.co.porkandspoon.dto.FileDTO">
        INSERT INTO file (ori_filename, new_filename, type, code_name, pk_idx)
            VALUES(#{ori_filename}, #{new_filename}, #{type}, #{code_name}, #{pk_idx})
    </insert>

    <!-- author yh.kim, (25.01.03)
            휴점 등록 시 공지사항 등록 -->
    <insert id="restBoardWrite"
            useGeneratedKeys="true"
            keyColumn="board_idx"
            keyProperty="board_idx"
            parameterType="kr.co.porkandspoon.dto.RestDTO">
        INSERT INTO free_board (username, subject, content, board_state, department)
            VALUES (#{username}, #{subject}, #{content},'0', #{id})
    </insert>

    <!-- author yh.kim, (25.01.03)
            휴점 등록 시 전사 캘린더 등록 -->
    <insert id="restCalenderWrite"
            useGeneratedKeys="true"
            keyProperty="idx"
            keyColumn="idx"
            parameterType="kr.co.porkandspoon.dto.RestDTO">
        INSERT INTO schedule(username, start_date, end_date, subject, content, type, id)
            VALUES(#{username}, #{start_date}, #{end_date}, #{subject}, #{content}, 'C', #{id})
    </insert>

    <!-- author yh.kim, (25.01.03)
            휴점 상세보기 -->
    <select id="getRestDetail" parameterType="String" resultType="kr.co.porkandspoon.dto.RestDTO">
        SELECT r.rest_idx, r.id, r.subject, r.content, r.creater, r.start_date, r.end_date, u.name AS username, c.content AS position, ds.name AS store_name, d.`text` AS dept_name, r.board_idx, r.schedule_idx
            FROM rest r LEFT JOIN `user` u ON r.creater = u.username
                        LEFT JOIN code c ON u.`position` = c.name
                        LEFT JOIN direct_store ds ON ds.id = r.id
                        LEFT JOIN department d ON d.id = ds.parent
            WHERE r.rest_idx = #{rest_idx}
    </select>

    <!-- author yh.kim, (25.01.03)
            휴점 수정 -->
    <update id="restUpdate" parameterType="kr.co.porkandspoon.dto.RestDTO">
        UPDATE rest SET subject = #{subject}, content = #{content}, start_date = #{start_date}, end_date = #{end_date}, updater = #{username}
            WHERE rest_idx = #{rest_idx}
    </update>

    <!-- author yh.kim, (25.01.03)
            휴점 수정 시 캘린더 수정 -->
    <update id="restCalenderUpdate" parameterType="kr.co.porkandspoon.dto.RestDTO">
        UPDATE schedule SET start_date = #{start_date}, end_date = #{end_date}, subject = #{subject}, content = #{content}
            WHERE idx = #{schedule_idx}
    </update>

    <!-- author yh.kim, (25.01.03)
                휴점 수정 시 공지사항 수정 -->
    <update id="restBoardUpdate" parameterType="kr.co.porkandspoon.dto.RestDTO">
        UPDATE free_board SET subject = #{subject}, content = #{content}
            WHERE board_idx = #{board_idx}
    </update>

    <!-- author yh.kim, (25.01.03)
                휴점 등록 시 게시판, 스케쥴 idx Insert -->
    <update id="restIdxWrite" parameterType="kr.co.porkandspoon.dto.RestDTO">
        UPDATE rest SET board_idx = #{board_idx}, schedule_idx = #{schedule_idx} WHERE rest_idx = #{rest_idx}
    </update>

    <!-- author yh.kim, (25.01.04)
                휴점 비활성화 -->
    <update id="restDelete" parameterType="kr.co.porkandspoon.dto.RestDTO">
        UPDATE rest SET use_yn = 'N' WHERE rest_idx = #{rest_idx}
    </update>

    <!-- author yh.kim, (25.01.04)
                    휴점 비활성화 시 캘린더 삭제 -->
    <delete id="restCalenderDelete" parameterType="kr.co.porkandspoon.dto.RestDTO">
        DELETE FROM schedule WHERE idx = #{schedule_idx}
    </delete>

    <!-- author yh.kim, (25.01.04)
                        휴점 비활성화 시 공지사항 삭제 -->
    <update id="restBoardDelete" parameterType="kr.co.porkandspoon.dto.RestDTO">
        UPDATE free_board SET use_yn = 'N' WHERE board_idx = #{board_idx}
    </update>

    <!-- author yh.kim, (25.01.04)
                        휴점 리스트 조회 -->
    <select id="restList" parameterType="map" resultType="kr.co.porkandspoon.dto.RestDTO">
        SELECT r.rest_idx, r.subject, r.start_date, r.end_date, u.name, d.`text` AS dept_name, ds.name AS store_name,
        CASE
            WHEN <![CDATA[ STR_TO_DATE(r.end_date, '%Y-%m-%d') < CURDATE() ]]>
                THEN '운영중'
                ELSE '휴점중'
                END AS type,
            (SELECT COUNT(*)
            FROM rest r
            LEFT JOIN `user` u ON r.creater = u.username
            LEFT JOIN direct_store ds ON r.id = ds.id
            LEFT JOIN department d ON d.id = ds.parent
            WHERE 1=1 AND r.use_yn = 'Y'
            <if test="username != null and username.trim() != ''">
                AND ds.owner = #{username}
            </if>
            <if test="keyword != null and keyword.trim() != ''">
                <choose>
                    <when test="option == 'name'">
                        <![CDATA[ AND u.name LIKE CONCAT('%', #{keyword}, '%') ]]>
                    </when>
                    <when test="option == 'subject'">
                        <![CDATA[ AND r.subject LIKE CONCAT('%', #{keyword}, '%') ]]>
                    </when>
                    <otherwise>
                        <![CDATA[ AND 1 = 0 ]]>
                    </otherwise>
                </choose>
            </if>
            ) AS totalpage
        FROM rest r LEFT JOIN `user` u ON r.creater = u.username
            LEFT JOIN direct_store ds ON r.id = ds.id
            LEFT JOIN department d ON d.id = ds.parent
        WHERE 1=1 AND r.use_yn = 'Y'
        <if test="username != null and username.trim() != ''">
            AND ds.owner = #{username}
        </if>
        <if test="keyword != null and keyword.trim() != ''">
            <choose>
                <when test="option == 'name'">
                    <![CDATA[ AND u.name LIKE CONCAT('%', #{keyword}, '%') ]]>
                </when>
                <when test="option == 'subject'">
                    <![CDATA[ AND r.subject LIKE CONCAT('%', #{keyword}, '%') ]]>
                </when>
                <otherwise>
                    <![CDATA[ AND 1 = 0 ]]>
                </otherwise>
            </choose>
        </if>
        ORDER BY <![CDATA[ STR_TO_DATE(r.start_date, '%Y-%m-%d') DESC ]]>
        LIMIT #{offset}, #{limit};
    </select>

    <!-- author yh.kim, (25.01.04)
            휴점 활성 여부 체크 스케쥴러 -->
    <update id="restCheckScheduler">
        UPDATE direct_store ds
            JOIN rest r ON ds.id = r.id
            SET ds.is_close = 'N'
        WHERE DATE(r.end_date) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)
    </update>

    <!-- author yh.kim, (25.01.09)
               직영점 기존 매출 여부 조회 -->
    <select id="pastSeales" parameterType="kr.co.porkandspoon.dto.ManageDTO" resultType="kr.co.porkandspoon.dto.ManageDTO">
        SELECT COALESCE(
            (SELECT sale
                FROM chart
            WHERE id = #{id} AND create_date = #{create_date}),0) AS sale
    </select>

    <!-- author yh.kim, (25.01.09)
                직영점 매출 등록 -->
    <insert id="salesWrite" parameterType="kr.co.porkandspoon.dto.ManageDTO">
        INSERT INTO chart (id, sale, create_date, creater) VALUES (#{id}, #{sale}, #{create_date}, #{username})
    </insert>

    <!-- author yh.kim, (25.01.09)
                직영점 매출 수정 -->
    <update id="salesUpdate" parameterType="kr.co.porkandspoon.dto.ManageDTO">
        UPDATE chart SET sale = #{sale} WHERE id = #{id} AND create_date = #{create_date}
    </update>

    <!-- author yh.kim, (25.01.10)
                매출 통계 월별 데이터 저장 스케쥴러 -->
    <insert id="salesMonthScheduler" parameterType="String">
        INSERT INTO statistics_month (sale, id, parent, year, month, day)
        SELECT
            c.sale, c.id, ds.parent, #{year}, #{month}, #{day}
        FROM chart c LEFT JOIN direct_store ds ON c.id = ds.id
        WHERE c.create_date = SUBDATE(CURDATE(), 0)
    </insert>

    <!-- author yh.kim, (25.01.10)
                매출 통계 일별 데이터 저장 스케쥴러 -->
    <insert id="salesDailyScheduler" parameterType="String">
        INSERT INTO statistics_day (sale, id, `year`, `month`, `day`, week)
        SELECT sale, id, #{year}, #{month}, #{day}, DAYOFWEEK(create_date)
        FROM chart WHERE create_date = SUBDATE(CURDATE(), 0)
    </insert>

    <!-- author yh.kim, (25.01.10)
         직영점 매출 통계 조회 (요일별) -->
    <select id="getWeekChartStatistics" parameterType="String" resultType="kr.co.porkandspoon.dto.ChartDTO">
        <![CDATA[
        SELECT SUM(sd.sale) AS weekSum, week FROM statistics_day sd
        WHERE sd.id = #{id}
          AND  STR_TO_DATE(CONCAT(sd.year, '-', sd.month, '-', sd.day), '%Y-%m-%d') < CURDATE()
          AND sd.year = #{year}
        GROUP BY sd.week
        ]]>z
    </select>

    <!-- author yh.kim, (25.01.10)
         직영점 매출 통계 조회 (연도 월별) -->
    <select id="getMonhtChartStatistics" parameterType="String" resultType="kr.co.porkandspoon.dto.ChartDTO">
        <![CDATA[
        SELECT SUM(sm.sale) AS monthSum, sm.`month` FROM statistics_month sm
        WHERE sm.id = #{id}
          AND  STR_TO_DATE(CONCAT(sm.year, '-', sm.month, '-', sm.day), '%Y-%m-%d') < CURDATE()
          AND sm.`year` = #{year}
        GROUP BY sm.month
        ]]>
    </select>

    <!-- author yh.kim, (25.01.10)
         브랜드별 매출 통계 조회 (브랜드별 연간) -->
    <select id="getChartDirectStatistics" parameterType="String" resultType="kr.co.porkandspoon.dto.ChartDTO">
        <![CDATA[
            SELECT SUM(sm.sale) AS brandSum, sm.parent, d.`text` AS brand
            FROM statistics_month sm LEFT JOIN department d ON sm.parent = d.id
            WHERE sm.`year` = #{year}  AND  STR_TO_DATE(CONCAT(sm.year, '-', sm.month, '-', sm.day), '%Y-%m-%d') < CURDATE()
            GROUP BY sm.parent
        ]]>
    </select>

    <!-- author yh.kim, (25.01.10)
         브랜드별 매출 통계 조회 (브랜드 총합 월간) -->
    <select id="getMonhtDirectStatistics" parameterType="map" resultType="kr.co.porkandspoon.dto.ChartDTO">
        <![CDATA[
            SELECT SUM(sm.sale) AS monthSum, sm.`month`
            FROM statistics_month sm
            WHERE sm.`year` = #{year} AND  STR_TO_DATE(CONCAT(sm.year, '-', sm.month, '-', sm.day), '%Y-%m-%d') < CURDATE()
        ]]>
        <if test="ctype != null and !ctype.equals('')">
            <![CDATA[
                    AND sm.parent = #{id}
                ]]>
        </if>
        <![CDATA[
            GROUP BY sm.`month`
        ]]>
    </select>

    <!-- author yh.kim, (25.01.10)
         브랜드 직영점 별 매출 통계 -->
    <select id="getChartBrandStatistics" parameterType="map" resultType="kr.co.porkandspoon.dto.ChartDTO">
        <![CDATA[
        SELECT SUM(sm.sale) AS brandSum, sm.parent, sm.id, ds.name AS brand
        FROM statistics_month sm LEFT JOIN direct_store ds ON sm.id = ds.id
        WHERE sm.`year` = #{year}  AND  STR_TO_DATE(CONCAT(sm.year, '-', sm.month, '-', sm.day), '%Y-%m-%d') < CURDATE()
          AND sm.parent = #{id}
        GROUP BY sm.id

        ]]>
    </select>


</mapper>