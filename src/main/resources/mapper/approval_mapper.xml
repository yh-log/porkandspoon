<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="kr.co.porkandspoon.dao.ApprovalDAO">
   <!-- DeptDTO에 대한 ResultMap-->
    <resultMap id="DeptMap" type="kr.co.porkandspoon.dto.DeptDTO">
        <result property="text" column="text"/>
        <result property="parent" column="parent"/>
    </resultMap>

    <!-- UserDTO에 대한 ResultMap -->
    <resultMap id="UserMap" type="kr.co.porkandspoon.dto.UserDTO">
        <result property="username" column="username"/>
        <result property="name" column="name"/>
        <result property="position_content" column="position_content"/>
        <!-- dept는 DeptMap을 참조 -->
        <association property="dept" resultMap="DeptMap"/>
    </resultMap>

    <!-- 사용자 정보를 가져오는 select 문 -->
    <select id="getUserInfo" resultMap="UserMap">
        SELECT 
            u.username, u.name, c.content AS position_content	, u.parent, d.text
        FROM 
            user u
        JOIN 
            department d
	        ON  
	            u.parent = d.id
		JOIN
			code c
			ON
				u.position = c.name
        WHERE 
            u.username = #{userId}
    </select>
	
	
	
<!-- 	<select id="getUserInfo" resultType="kr.co.porkandspoon.dto.UserDTO">
		SELECT 
			u.username, u.name, u.parent, d.text
			FROM 
				user u
			JOIN department d
			ON  u.parent = d.id
			WHERE 
				username = #{loginId}
	</select> -->
	
	<select id="getDeptList" resultType="kr.co.porkandspoon.dto.DeptDTO">
		SELECT 
			id, text 
		FROM 
			department
	</select>
	
	<select id="getDraftIdx">
		SELECT 
			IFNULL(MAX(draft_idx),0) + 1 
		FROM 
			draft
	</select>
	
	
<!-- 	INSERT INTO draft_document (document_id, title, content)
VALUES (1, '기안문 제목', '기안문 내용')
ON DUPLICATE KEY UPDATE
title = VALUES(title),
content = VALUES(content); -->
	
	
	
<!-- 	useGeneratedKeys="true"
		keyColumn="draft_idx"
		keyProperty="draft_idx" -->
	
	<insert id="saveDraft" parameterType="kr.co.porkandspoon.dto.ApprovalDTO">
		INSERT INTO draft (username, target_type, action_type,
			 status, dept_id, document_number
			 <if test="draft_idx != null">
			 ,draft_idx
			 </if>
			 <if test="subject != null">
			 ,subject
			 </if>
			 <if test="name != null">
			 ,name
			 </if>
			 <if test="content != null">
			 ,content
			 </if>
			 <if test="from_date != null">
			 ,from_date
			 </if>
		  	<if test="address != null">
            	,address
        	</if>
		  	<if test="address_detail != null">
            	,address_detail
        	</if>
		  	<if test="cooper_dept_id != null">
            	,cooper_dept_id
        	</if>
		)
		VALUES (
			#{username}, #{target_type}, #{action_type}
			 ,#{status}, #{dept_id}, #{document_number}
			 <if test="draft_idx != null">
			  , #{draft_idx}
			 </if>
			<if test="subject != null">
			 , #{subject}
			 </if>
			<if test="name != null">
			 , #{name}
			 </if>
			<if test="content != null">
			  ,#{content}
			</if>
			<if test="from_date != null">
			  ,#{from_date}
			</if>
			<if test="address != null">
            	,#{address}
        	</if>
		  	<if test="address_detail != null">
            	,#{address_detail}
        	</if>
		  	<if test="cooper_dept_id != null">
            	,#{cooper_dept_id}
        	</if>
		) ON DUPLICATE KEY UPDATE
			status = VALUES(status),
			dept_id = VALUES(dept_id),
			subject = VALUES(subject),
			name = VALUES(name),
			content = VALUES(content),
			from_date = VALUES(from_date),
			address = VALUES(address),
			address_detail = VALUES(address_detail),
			cooper_dept_id = VALUES(cooper_dept_id)
	</insert>
	
	<select id="checkExistingApprovalLine" resultType="int">
	    SELECT COUNT(*)
	    FROM approval_line
	    WHERE draft_idx = #{draftIdx}
	</select>
	
	<!-- <insert id="saveApprovalLine">
		INSERT INTO 
			approval_line (draft_idx, username, order_num, status, approval_date) 
		VALUES
        <choose>
            <when test="order_num == 0 and status == 'sv'">
                (#{draftIdx}, #{username}, #{order_num}, 'ap001', null)
            </when>
            <when test="order_num == 0 and status == 'sd'">
                (#{draftIdx}, #{username}, #{order_num}, 'ap004', NOW())
            </when>
            <otherwise>
                (#{draftIdx}, #{username}, #{order_num}, 'ap001', null)
            </otherwise>
        </choose>
	    ON DUPLICATE KEY UPDATE 
            username = VALUES(username),
            status = VALUES(status),
            approval_date = VALUES(approval_date)
	</insert> -->
	<!-- upsert로 변경전 -->
	<insert id="saveApprovalLine">
		INSERT INTO approval_line (draft_idx, username, order_num, status, approval_date) 
		values
	    <foreach collection="appr_user" item="appritem" index="index" separator=",">
	        <choose>
	            <when test="index == 0 and status == 'sv'">
	                (#{draftIdx}, #{appritem}, #{index}, 'ap001', null)
	            </when>
	            <when test="index == 0 and status == 'sd'">
	                (#{draftIdx}, #{appritem}, #{index}, 'ap004', NOW())
	            </when>
	            <otherwise>
	                (#{draftIdx}, #{appritem}, #{index}, 'ap001', null)
	            </otherwise>
	        </choose>
	    </foreach>
	</insert>
	
<!-- 	<update id="updateApprovalLine">
		UPDATE 
			approval_line 
		SET
			username = #{username},
			status = 'ap001'
		WHERE 
			draft_idx = #{draftIdx}
			AND
			order_num = #{order_num}
	</update> -->

	<insert id="removeApprovalLine">
		DELETE FROM approval_line WHERE draft_idx = #{draft_idx}
	</insert>
	
	<select id="checkExistingFile" resultType="int">
		SELECT COUNT(*) FROM file
			WHERE code_name = 'df000' 
			AND pk_idx = #{draftIdx}
			AND ori_filename = #{ori_filename}
	</select>
	
	
	
	
	<select id="getMaxNumberForDate" resultType="Integer">
	    SELECT MAX(SUBSTRING(document_number, 6, 4))
	    FROM draft
	    WHERE document_number LIKE CONCAT(#{prefixDate}, '%')
	    FOR UPDATE
	</select>
	
	<!-- 파일 정보 저장 -->
	<!--<insert id="fileWrite" parameterType="kr.co.porkandspoon.dto.FileDTO">
		insert into file (code_name, ori_filename, new_filename, type, pk_value)
			values (#{code_name}, #{ori_filename}, #{new_filename}, #{type}, #{pk_value})
	</insert>-->
	
	<insert id="fileSave" parameterType="kr.co.porkandspoon.dto.FileDTO">
		INSERT INTO file 
			(code_name, ori_filename, new_filename, type, pk_idx)
		VALUES 
			(#{code_name}, #{ori_filename}, #{new_filename}, #{type}, #{pk_idx})
	</insert>
	
	<insert id="saveExistingFiles">
		INSERT INTO file (code_name, ori_filename, new_filename, type, pk_idx)
			SELECT code_name, ori_filename, new_filename, type, #{draftIdx}
				FROM file
				WHERE new_filename = #{filename};
	</insert>
	
	
	<select id="getDraftInfo" parameterType="String" resultType="kr.co.porkandspoon.dto.ApprovalDTO">
		SELECT d.draft_idx, d.document_number, d.create_date, d.username, d.target_type, d.action_type, d.subject, d.name, d.from_date, d.content, d.address, d.address_detail, d.cooper_dept_id, d.dept_id, d.status, u.name AS user_name, de.text AS dept_name, c.content AS status_name
			FROM draft d LEFT JOIN user u ON d.username = u.username
			LEFT JOIN department de ON d.dept_id = de.id
			LEFT JOIN code c ON d.status = c.name
			WHERE draft_idx = #{draft_idx}
	</select>
	
	<select id="getApprLine" parameterType="String" resultType="kr.co.porkandspoon.dto.ApprovalDTO">
		SELECT a.*, c.content AS position, u.name AS user_name, d.text AS dept_name, f.new_filename AS sign, f.code_name FROM approval_line a 
			JOIN user u ON a.username = u.username 
			JOIN code c ON u.position = c.name
			JOIN department d ON u.parent = d.id
			LEFT JOIN file f ON a.username = f.pk_idx
			WHERE draft_idx = #{draft_idx} 
			AND (f.code_name = 'us100' OR f.code_name IS NULL)
			ORDER BY order_num
	</select>
	
	<select id="getLogoFile" parameterType="String" resultType="kr.co.porkandspoon.dto.FileDTO">
		SELECT ori_filename, new_filename, pk_idx FROM file 
			WHERE code_name = 'bl001' 
			AND pk_idx = #{draft_idx}
	</select>

	<select id="getAttachedFiles" parameterType="String" resultType="kr.co.porkandspoon.dto.FileDTO">
		SELECT ori_filename, new_filename, pk_idx FROM file 
			WHERE code_name = 'df000' 
			AND pk_idx = #{draft_idx}
	</select>
	
	
	
	
	
	<update id="updateDraft" parameterType="kr.co.porkandspoon.dto.ApprovalDTO">
		UPDATE draft SET 
			 	subject = #{subject}
				 ,name = #{name}
				 ,content = #{content}
				 ,from_date = #{from_date}
            	,address = #{address}
            	,address_detail = #{address_detail}
            	,cooper_dept_id = #{cooper_dept_id}
        	 WHERE draft_idx = #{draft_idx}
	</update>
	
	<delete id="deleteFiles" parameterType="kr.co.porkandspoon.dto.FileDTO">
		DELETE FROM file
			WHERE code_name IN ('df000','bl001')
			AND pk_idx = #{pk_idx} 
			AND new_filename = #{new_filename}
	</delete>
	
	<update id="changeApprovalLineToReturn" parameterType="kr.co.porkandspoon.dto.ApprovalDTO">
		UPDATE approval_line 
			SET status = 'ap003',
				comment = #{comment},
				approval_date = #{approval_date} 
			WHERE draft_idx = #{draft_idx}
			AND username = #{username}
	</update>

	<update id="changeStatusToReturn" parameterType="kr.co.porkandspoon.dto.ApprovalDTO">
		UPDATE draft
			SET status = 're'
			WHERE draft_idx = #{draft_idx}
	</update>
	
	
	
	<update id="ApprovalDraft" parameterType="kr.co.porkandspoon.dto.ApprovalDTO">
		UPDATE approval_line 
			SET status = 'ap004',
				approval_date = #{approval_date} 
			WHERE draft_idx = #{draft_idx}
			AND username = #{username}
	</update>
	
	<!-- 유저의 부서 조회 -->
	<select id="getUserDept" parameterType="String" resultType="String">
		SELECT parent FROM user WHERE username = #{loginId} 
	</select>
	
	<!-- 기안문 열람권한 체크 (기안자)  -->		
	<select id="isDraftSender" parameterType="String" resultType="String">
	    SELECT 1
		    FROM draft
		    WHERE draft_idx = #{draft_idx}
		    AND username = #{loginId}
	</select>
	<select id="approverStatus" parameterType="String" resultType="String">
	    SELECT status
		    FROM approval_line 
		    WHERE draft_idx = #{draft_idx}
		    AND username = #{loginId}
	</select>
	<select id="otherApproversStatus" parameterType="String" resultType="String">
	    <![CDATA[
	    SELECT status
		    FROM approval_line 
		    WHERE draft_idx = #{draft_idx}
		    AND order_num < 
		    (SELECT order_num 
		    	FROM approval_line 
		    	WHERE draft_idx = #{draft_idx} 
		    	AND username = #{loginId})
		  ]]>
	</select>

	<select id="isCooperDept" parameterType="String" resultType="String">
	    SELECT 1
		    FROM draft d
		    JOIN department dept ON dept.id = d.cooper_dept_id
		    WHERE d.draft_idx = #{draft_idx}
		    AND dept.id = #{userDept}
	</select>
	<select id="isApproveDept" parameterType="String" resultType="String">
	    SELECT 1
		    FROM draft d
		    JOIN department dept ON dept.id = d.dept_id
		    WHERE d.draft_idx = #{draft_idx}
		    AND dept.id = #{userDept}
	</select>
	<select id="getDraftStatus" parameterType="String" resultType="String">
		SELECT status FROM draft WHERE draft_idx = #{draft_idx}
	</select>
	<update id="changeStatusToRead" parameterType="String">
		UPDATE approval_line 
			SET status = 'ap002' 
			WHERE draft_idx = #{draft_idx}
			AND username = #{loginId}
	</update>
	<update id="changeStatusToApproved" parameterType="String">
		UPDATE draft 
			SET status = 'co' 
			WHERE draft_idx = #{draft_idx}
	</update>
	
	<update id="approvalRecall" parameterType="String">
		UPDATE draft SET status = 'ca' 
			WHERE draft_idx = #{draft_idx}	
	</update>

	<update id="changeStatusToSend" parameterType="String">
		UPDATE draft SET status = 'sd' 
			WHERE draft_idx = #{draft_idx}	
	</update>

	<update id="changeSenderStatus" parameterType="String">
		UPDATE 
			approval_line 
		SET 
			status = 'ap004'
			,approval_date = NOW() 
		WHERE 
			draft_idx = #{draft_idx}
			AND 
			username = #{loginId}
	</update>

	<update id="changeStatusToDelete" parameterType="String">
		UPDATE draft SET status = 'de' 
			WHERE draft_idx = #{draft_idx}	
	</update>

	<!-- 기안리스트 -->
	<select id="getApprovalMyListData" resultType="kr.co.porkandspoon.dto.ApprovalDTO" parameterType="map">
		WITH user_parent AS (
		    SELECT u.parent, de.text AS dept_text
		    FROM user u
		    LEFT JOIN department de ON u.parent = de.id
		    WHERE u.username = #{loginId}
		)
		SELECT 
			d.draft_idx 
			,d.document_number
			,d.subject 
			,d.create_date
			,d.target_type
			,d.action_type
			,d.status
			,u.name
			,(SELECT approval_date 
				FROM approval_line 
				WHERE draft_idx = d.draft_idx 
				ORDER BY approval_date DESC 
				LIMIT 1
			) AS approval_date
			,de.text AS dept_text
			,c.content AS status_name
			,(SELECT dept_text FROM user_parent) AS user_dept_text 
			,COUNT(*) OVER() AS total_count
			FROM draft d 
			LEFT JOIN user u ON d.username = u.username 
			LEFT JOIN department de ON d.dept_id = de.id
			LEFT JOIN code c ON d.status = c.name
			<choose>
				<when test="listType == 'did'">
					LEFT JOIN approval_line al ON d.draft_idx = al.draft_idx 
					WHERE al.username = #{loginId}
					AND al.status = 'ap004'
				</when>
				<when test="listType == 'my'">
					WHERE d.username = #{loginId}
					<choose>
						<when test="filter == 'all'">
							AND status NOT IN('sv', 'de')
						</when>
						<otherwise>
							AND status = #{filter}
						</otherwise>
					</choose>
				</when>
				<when test="listType == 'tobe'">
					LEFT JOIN approval_line al ON d.draft_idx = al.draft_idx 
					WHERE al.username = #{loginId}
					AND al.status IN ('ap001','ap002')
					AND 
						(SELECT status FROM approval_line al2 
							WHERE draft_idx = d.draft_idx 
							AND order_num = al.order_num-1) = 'ap004'
				</when>
				<when test="listType == 'sv'">
					WHERE d.username = #{loginId}
					AND d.status = 'sv'
				</when>
				<when test="listType == 'dept'">
					WHERE (d.dept_id = (SELECT parent FROM user_parent)
					OR d.cooper_dept_id = (SELECT parent FROM user_parent))
				</when>
			</choose>
			<if test="search != null and !search.equals('') and option == 'subject'"> 
				AND d.subject LIKE CONCAT('%',#{search},'%')		
			</if>
			AND d.status != 'de'
			ORDER BY d.create_date DESC 
			LIMIT #{limit} 
			OFFSET #{offset}			
	</select>
	
    <select id="getMaxBookmarkIdx" resultType="int">
        SELECT IFNULL(MAX(line_idx), 0) + 1
        FROM approval_bookmark
        FOR UPDATE
    </select>
	
	<insert id="setApprLineBookmark" parameterType="map">
		INSERT INTO approval_bookmark (line_idx, username, line_name, `order_user`) 
			VALUES
			 (#{bookmarkIdx}, #{loginId}, #{line_name}, 
		         JSON_OBJECT(
		            <foreach collection="approvalLines" item="lineItem" index="index" separator=",">
		                '${index}', #{lineItem}
		            </foreach>
		         )
		    )
	</insert>
	
	<select id="getLineBookmark" parameterType="map" resultType="kr.co.porkandspoon.dto.ApprovalDTO" >
		SELECT 
		    ab.line_idx,
		    ab.line_name,
		    ab.username,
		    u.name,
		    JSON_UNQUOTE(JSON_EXTRACT(ab.order_user, '$.*')) AS approver_usernames,
		    GROUP_CONCAT(u2.name ORDER BY JSON_UNQUOTE(JSON_EXTRACT(ab.order_user, CONCAT('$.', idx))) SEPARATOR ', ') AS approver_names, 
		    GROUP_CONCAT(c.content ORDER BY JSON_UNQUOTE(JSON_EXTRACT(ab.order_user, CONCAT('$.', idx))) SEPARATOR ', ') AS approver_positions,
			COUNT(*) OVER() AS total_count
		FROM 
		    approval_bookmark ab
		JOIN 
		    user u ON ab.username = u.username 
		JOIN 
		    JSON_TABLE(
		        ab.order_user, 
		        '$.*' COLUMNS (idx FOR ORDINALITY, approver_username VARCHAR(255) PATH '$')
		    ) jt ON TRUE 
		JOIN 
		    user u2 ON JSON_UNQUOTE(JSON_EXTRACT(ab.order_user, CONCAT('$.', idx))) = u2.username
		JOIN 
		    code c ON u2.position = c.name 
	    WHERE 
	    	ab.username = #{loginId}
	    GROUP BY 
	    	ab.line_idx
				ORDER BY ab.line_idx
				<if test="limit != null">
				LIMIT #{limit}
				</if>
				<if test="offset != null">
				OFFSET #{offset}
				</if>
	</select>
	
	<delete id="deleteBookmark" parameterType="String">
		DELETE 
		FROM 
			approval_bookmark 
		WHERE 
			username = #{loginId} 
			AND 
			line_idx = #{lineIdx}
	</delete>
	
</mapper>