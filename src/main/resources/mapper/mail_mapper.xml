<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="kr.co.porkandspoon.dao.MailDAO">
	<select id="getUserList" resultType="map">
		<![CDATA[
		SELECT 
			u.username
			,CONCAT(
				u.name
				, '/'
				, c.content
				, '/'
				, IFNULL(d.text, '미발령')
				, ' <'
				, u.username
				, '>') 
				AS text
		FROM 
			user u
		JOIN code c ON u.`position` = c.name 
		LEFT JOIN department d ON u.parent = d.id;
		]]>
	</select>
	
	<insert id="saveMail" parameterType="kr.co.porkandspoon.dto.MailDTO">
		INSERT INTO mail (
			sender
			,send_status
			 <if test="idx != null">
			 	,idx
			 </if>
			 <if test="title != null">
			 	,title
			 </if>
			 <if test="content != null">
			 	,content
			 </if>
			)
		VALUES (
			#{sender}
			,#{send_status}
			<if test="idx != null">
				,#{idx}
			</if>	
			<if test="title != null">
				,#{title}
			</if>	
			<if test="content != null">
				,#{content}
			</if>	
		)
		ON DUPLICATE KEY UPDATE
			send_status = VALUES(send_status),
			title = VALUES(title),
			content = VALUES(content)
	</insert>
	
	<delete id="removeMailReceiver">
		DELETE 
			FROM mail_receive
		WHERE 
			idx = #{mailIdx}
	</delete>

	<insert id="saveMailReceiver" parameterType="String">
		INSERT 
			INTO mail_receive (idx, username)
		VALUES
		<foreach collection="username" item="user" separator=",">
			(#{mailIdx}, #{user})
		</foreach>
	</insert>
	
	<select id="getmailIdx" resultType="String">
		SELECT 
			IFNULL(MAX(idx),0) + 1 
		FROM 
			mail
	</select>
	
	<select id="checkExistingFile" resultType="int">
		SELECT COUNT(*) FROM file
			WHERE code_name = 'ma001' 
			AND pk_idx = #{mailIdx}
			AND ori_filename = #{ori_filename}
	</select>
	
	<insert id="fileSave" parameterType="kr.co.porkandspoon.dto.FileDTO">
		INSERT INTO file 
			(code_name, ori_filename, new_filename, type, pk_idx)
		VALUES 
			(#{code_name}, #{ori_filename}, #{new_filename}, #{type}, #{pk_idx})
	</insert>
	
	<select id="getMailInfo" resultType="kr.co.porkandspoon.dto.MailDTO">
		<![CDATA[
		SELECT 
			m.*
			,u.name
			,c.content AS position_name
			,d.text AS dept_name
			,(SELECT 
				GROUP_CONCAT(
					u.name
					,'/'
					,c.content
					,'/'
					,IFNULL(d.`text`,'미발령')
					,' <'
					,mr.username
					,'>'
				)
			FROM 
				mail_receive mr
			LEFT JOIN 
				user u 
				ON mr.username = u.username 
			LEFT JOIN 
				department d 
				ON u.parent = d.id 
			LEFT JOIN 
				code c 
				ON u.position = c.name 
			WHERE mr.idx = #{idx}
			) AS username
		FROM 
			mail m 
		LEFT JOIN 
				user u 
				ON m.sender = u.username 
		LEFT JOIN 
			department d 
			ON u.parent = d.id 
		LEFT JOIN 
			code c 
			ON u.position = c.name 
		WHERE 
			m.idx = #{idx}
		]]>
	</select>
	
<!-- 	<select id="getMailInfo" resultType="kr.co.porkandspoon.dto.MailDTO">
		SELECT 
			m.*
			,mr.username 
		FROM 
			mail m 
		LEFT JOIN 
			mail_receive mr 
			ON m.idx = mr.idx 
		WHERE 
			m.idx = #{idx}
	</select> -->
	
<!-- 	<select id="isBookmarked" resultType="int">
		SELECT 
			COUNT(idx) 
		FROM 
			mail_bookmark 
		WHERE 
			idx = #{idx} 
			AND 
			username = #{loginId}
	</select> -->
	
	<select id="getReceivedMailUseFromDate" resultType="String">
		SELECT use_from_date 
		FROM mail_receive 
		WHERE idx = #{idx} 
		AND username = #{loginId}
	</select>

	<select id="getSentMailUseFromDate" resultType="String">
		SELECT use_from_date 
		FROM mail
		WHERE idx = #{idx} 
		AND sender = #{loginId}
	</select>
	
	<delete id="deleteBookmark" parameterType="map">
		DELETE 
			FROM mail_bookmark
		WHERE 
			idx = #{idx} 
			AND 
			username = #{username}
	</delete>
	
	<insert id="setBookmark" parameterType="map">
		INSERT 
			INTO mail_bookmark
		(idx, username)
		VALUES ( 
			#{idx}
			,#{username}
		) 
	</insert>
	
	<select id="isSender" parameterType="map" resultType="int">
		SELECT COUNT(idx) 
		FROM mail
		WHERE idx = #{idx}
		AND sender = #{username} 
	</select>

	<select id="isReceiver" parameterType="map" resultType="int">
		SELECT COUNT(idx) 
		FROM mail_receive
		WHERE idx = #{idx}
		AND username = #{username} 
	</select>
	
	<update id="toggleSentMailBookmark" parameterType="map">
		UPDATE mail
		SET
			is_bookmark = #{is_bookmark}
		WHERE
			idx = #{idx}
			AND 
			sender = #{username} 
	</update>
	
	<update id="toggleReceivedMailBookmark" parameterType="map">
		UPDATE mail_receive
		SET
			is_bookmark = #{is_bookmark}
		WHERE
			idx = #{idx}
			AND 
			username = #{username} 
	</update>
	
	<select id="getSentMailBookmark" resultType="String">
		SELECT 
				is_bookmark
			FROM 
				mail
			WHERE 
				idx = #{idx}
			AND 
				sender = #{loginId} 
	</select>

	<select id="getReceivedMailBookmark" resultType="String">
		SELECT 
				is_bookmark
			FROM 
				mail_receive
			WHERE 
				idx = #{idx}
			AND 
				username = #{loginId} 
	</select>
	
	<select id="getAttachedFiles" parameterType="String" resultType="kr.co.porkandspoon.dto.FileDTO">
		SELECT ori_filename, new_filename, type FROM file 
			WHERE code_name = 'ma001' 
			AND pk_idx = #{idx}
	</select>
	
	<select id="getSendList" parameterType="map" resultType="kr.co.porkandspoon.dto.MailDTO">
 		SELECT 
			m.idx,
			m.title,
			m.is_bookmark,
			m.send_date,
			(SELECT MIN(idx) 
				FROM file 
				WHERE pk_idx = m.idx 
				AND code_name = 'ma001'
			) AS fileYn,
			mr.username,
			u.name,
			'sent' AS mail_type,
			COUNT(*) OVER() AS total_count
		FROM 
			mail m
		JOIN (
		    SELECT 
		    	idx, 
		    	MIN(username) AS username
		    FROM mail_receive
		    GROUP BY idx
		) AS mr ON m.idx = mr.idx
		JOIN 
			user u ON mr.username = u.username
		WHERE 
		    m.sender = #{loginId}
		    AND 
		    	m.send_status = 'sd'
		    AND 
		    	m.use_yn = 'Y'
		    AND
				m.use_from_date IS NULL
			<if test="search != null and !search.equals('') and option == 'subject'"> 
				AND m.title LIKE CONCAT('%',#{search},'%')		
			</if>
			ORDER BY m.idx DESC
			LIMIT #{limit} 
			OFFSET #{offset}	
	</select>
	
	<select id="getReceiveList" parameterType="map" resultType="kr.co.porkandspoon.dto.MailDTO">
 		SELECT 
		    m.idx
		    ,m.sender
		    ,m.title
		    ,m.send_date
		    ,(SELECT MIN(idx) 
		     	FROM file 
		     	WHERE pk_idx = m.idx 
		     	AND code_name = 'ma001'
	     	) AS fileYn
		    ,mr.is_bookmark
		    ,mr.is_read
		    ,u.name
		    ,'received' AS mail_type
		    ,COUNT(*) OVER() AS total_count
		FROM mail m
		JOIN user u 
			ON m.sender = u.username
		JOIN mail_receive mr 
			ON m.idx = mr.idx 
			AND mr.username = #{loginId}
		WHERE 
		    mr.use_yn = 'Y' 
		    AND
			mr.use_from_date IS NULL
		    AND m.send_status = 'sd' 
	    <if test="filter != null and filter == 'noread'">
			AND mr.is_read = 'N'
		</if>
		<if test="search != null and !search.equals('') and option == 'subject'"> 
			AND m.title LIKE CONCAT('%',#{search},'%')		
		</if>
		ORDER BY m.idx DESC
		LIMIT #{limit} 
		OFFSET #{offset}
	</select>
	
	<select id="getSaveList" parameterType="map" resultType="kr.co.porkandspoon.dto.MailDTO">
 		SELECT 
 			m.idx
 			,m.title
 			,m.is_bookmark
 			,m.send_date 
			,(SELECT MIN(idx) 
				FROM file 
				WHERE pk_idx = m.idx 
				AND code_name = 'ma001'
			) AS fileYn
			,(SELECT MIN(username) 
				FROM mail_receive mr 
				WHERE m.idx = mr.idx 
				GROUP BY idx
			) AS username
			,u.name
		    ,'sent' AS mail_type
			,COUNT(*) OVER() AS total_count
		FROM mail m
		JOIN user u
			ON m.sender = u.username 
		WHERE
			m.sender = #{loginId}
			AND
			send_status = 'sv'
			AND
			m.use_yn = 'Y'
			AND
			m.use_from_date IS NULL
			<if test="search != null and !search.equals('') and option == 'subject'"> 
				AND m.title LIKE CONCAT('%',#{search},'%')		
			</if>
		ORDER BY m.idx DESC
		LIMIT #{limit} 
		OFFSET #{offset}
	</select>
	
	<select id="getBookMark" parameterType="map" resultType="kr.co.porkandspoon.dto.MailDTO">
 		SELECT  
		    m.idx
		    ,m.title
		    ,m.send_date
		    ,CASE 
		        WHEN m.sender = #{loginId} THEN 'sent'
		        ELSE 'received'
		    END 
		    AS mail_type
		    ,COALESCE(m.sender,mr.username) 
		    AS username
		    ,u.name
		    ,mr.is_read
		    ,(SELECT MIN(idx) 
		    	FROM file 
	    		WHERE pk_idx = m.idx 
	    		AND code_name = 'ma001'
    		) AS fileYn
    		,COUNT(*) OVER() AS total_count
		FROM mail m
		LEFT JOIN (
		    SELECT 
		    	*
		    FROM mail_receive mr_inner
		    WHERE mr_inner.username = #{loginId}
		) mr 
			ON m.idx = mr.idx
		LEFT JOIN user u 
			ON u.username = COALESCE(m.sender,mr.username) 
		WHERE (
		    (m.sender = #{loginId} AND m.is_bookmark = 'Y') 
		    OR (m.sender != #{loginId} AND mr.is_bookmark = 'Y')
		)
		AND (
		    (m.sender = #{loginId} AND m.use_yn = 'Y') 
		    OR (m.sender != #{loginId} AND mr.use_yn = 'Y')
		)
		AND (
		    (m.sender = #{loginId} AND m.use_from_date IS NULL) 
		    OR (m.sender != #{loginId} AND mr.use_from_date IS NULL)
		)
		<if test="search != null and !search.equals('') and option == 'subject'"> 
		AND m.title LIKE CONCAT('%',#{search},'%')		
		</if>
		ORDER BY m.idx DESC
		LIMIT #{limit} 
		OFFSET #{offset}
	</select>
	
	<select id="getDeleteList" parameterType="map" resultType="kr.co.porkandspoon.dto.MailDTO">
 		SELECT
			m.idx
			,m.title
			,m.send_date
			,m.sender
			,CASE 
			    WHEN mr.username = #{loginId} THEN 'received'
			    ELSE 'sent'
			END AS mail_type
			,CASE 
			    WHEN mr.username = #{loginId} THEN mr.is_bookmark  
			    ELSE m.is_bookmark 
			END AS is_bookmark
			,CASE 
			    WHEN mr.username = #{loginId}
			    THEN m.sender  
			    ELSE (
			        SELECT 
			        	GROUP_CONCAT(mr_inner.username 
			        		ORDER BY mr_inner.username ASC LIMIT 1
			    		)
			        FROM mail_receive mr_inner
			        WHERE mr_inner.idx = m.idx
			    )  
			END AS username
			,(SELECT MIN(idx) 
				FROM file 
				WHERE pk_idx = m.idx 
				AND code_name = 'ma001'
			) AS fileYn
			,CASE 
			    WHEN mr.username = #{loginId} THEN (
					SELECT u.name from user u
					where mr.username = u.username
			    )
			    ELSE (
					SELECT u.name from user u
					where m.sender = u.username
			    )
			END AS name
			,mr.is_read
			,COUNT(*) OVER() AS total_count
			FROM mail_receive mr 
			JOIN mail m ON mr.idx = m.idx
			JOIN user u
				ON m.sender = u.username 
			WHERE (mr.username = #{loginId} OR m.sender = #{loginId})
			AND (
				(mr.username = #{loginId} AND mr.use_from_date IS NOT NULL)
				OR (mr.username != #{loginId} AND m.use_from_date IS NOT NULL)
			)
			AND (
				(mr.username = #{loginId} AND mr.use_yn = 'Y')
				OR (mr.username != #{loginId} AND m.use_yn = 'Y')
			)
		<if test="search != null and !search.equals('') and option == 'subject'"> 
		AND m.title LIKE CONCAT('%',#{search},'%')		
		</if>
		ORDER BY m.idx DESC
		LIMIT #{limit} 
		OFFSET #{offset}
	</select>

	<update id="changeToRead" parameterType="map">
		UPDATE 
			mail_receive
		SET 
			is_read = 'Y'
			,read_date = NOW()
		WHERE
			idx IN (
			<foreach collection="idxList" item="idx" index="index" separator=",">
				#{idx}
			</foreach>
			)
			AND 
			username = #{loginId}
	</update>

	<update id="changeToUnread">
		UPDATE 
			mail_receive
		SET 
			is_read = 'N'
			,read_date = null
		WHERE
			idx = #{idx}
			AND 
			username = #{loginId}
	</update>
	
	<update id="moveReceivedToTrash">
		UPDATE 
			mail_receive 
		SET 
			use_from_date = NOW() 
		WHERE 
			idx = #{idx}
		AND 
			username = #{loginId}
	</update>
	
	<update id="moveSentToTrash">
		UPDATE 
			mail
		SET 
			use_from_date = NOW() 
		WHERE 
			idx = #{idx}
		AND 
			sender = #{loginId}
	</update>

	<update id="receivedRestoreFromTrash">
		UPDATE 
			mail_receive 
		SET 
			use_from_date = null
		WHERE 
			idx = #{idx}
		AND 
			username = #{loginId}
	</update>
	
	<update id="sentRestoreFromTrash">
		UPDATE 
			mail
		SET 
			use_from_date = null
		WHERE 
			idx = #{idx}
		AND 
			sender = #{loginId}
	</update>
	
	<update id="receivedCompleteDelete">
		UPDATE 
			mail_receive 
		SET 
			use_yn = 'N'
		WHERE 
			idx = #{idx}
		AND 
			username = #{loginId}
	</update>

	<update id="sentCompleteDelete">
		UPDATE 
			mail
		SET 
			use_yn = 'N'
		WHERE 
			idx = #{idx}
		AND 
			sender = #{loginId}
	</update>
	
	
	<insert id="setDeleveryExistingImage" parameterType="String">
		INSERT INTO 
			file (code_name, ori_filename, new_filename, type, pk_idx)
			SELECT code_name, ori_filename, new_filename, type, #{mailIdx}
			FROM file 
			WHERE new_filename = #{fileId} 
			AND pk_idx = ${originalIdx}
			AND code_name = 'ma001'
	</insert>
	
	<select id="savedMailCount" resultType="int">
		SELECT COUNT(idx) 
		FROM mail 
		WHERE sender = #{loginId} 
		AND send_status = 'sv' 
		AND use_yn = 'y' 
		AND use_from_date IS NULL
	</select>
	
	<select id="getSenderReceivers" resultType="kr.co.porkandspoon.dto.MailDTO">
		SELECT 
			m.sender
			,mr.username 
		FROM mail m
		LEFT JOIN mail_receive mr 
		ON m.idx = mr.idx
   		WHERE m.idx = #{idx}
	</select>
	
	<insert id="copyMailRow" parameterType="kr.co.porkandspoon.dto.MailDTO"
		useGeneratedKeys="true"
		keyColumn="idx"
		keyProperty="idx">
		INSERT INTO mail (sender,title,content,send_date,send_status)
		SELECT sender, title, content, NOW(), send_status 
		FROM mail 
		WHERE idx = #{idx}
	</insert>
	
	<insert id="copyMailReceiverRow">
		INSERT INTO mail_receive (idx, username)
		SELECT #{newIdx}, username 
		FROM mail_receive
		WHERE idx = #{idx}
	</insert>
	
	<select id="unreadMailCount" resultType="int">
		SELECT count(idx) 
		FROM mail_receive 
		WHERE username = #{loginId} 
		AND is_read = 'N' 
		AND use_yn ='Y' 
		AND use_from_date IS NULL
	</select>
	
</mapper>